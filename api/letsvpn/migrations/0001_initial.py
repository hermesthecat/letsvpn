# Generated by Django 3.2.7 on 2022-01-19 05:42

import api.models.uuid
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import letsvpn.WireguardServer.models
from letsvpn.GlobalSettings.models import create_settings, delete_settings
from letsvpn.WireguardServer.models import create_default_server, delete_default_server


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GlobalSettings',
            fields=[
                ('id', api.models.uuid.UUIDField(default=api.models.uuid.gen_uuid, editable=False, max_length=8, primary_key=True, serialize=False, unique=True)),
                ('autogen_config', models.BooleanField(default=True, verbose_name='Auto-generate Wireguard Configs')),
            ],
            options={
                'verbose_name': 'LetsVPN Settings',
                'verbose_name_plural': 'LetsVPN Settings',
            },
        ),
        migrations.CreateModel(
            name='WireguardServer',
            fields=[
                ('id', api.models.uuid.UUIDField(default=api.models.uuid.gen_uuid, editable=False, max_length=8, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(default='wg0', max_length=32, unique=True, verbose_name='Interface Name')),
                ('default', models.BooleanField(default=False, help_text='Default server when creating new peers.', verbose_name='Default Server')),
                ('enabled', models.BooleanField(default=True, help_text='Is this server enabled? (Will not start server when disabled)', verbose_name='Enabled')),
                ('wan', models.GenericIPAddressField(blank=True, help_text='AUTOFILLED: Public (WAN) IPv4 address for this server', null=True, verbose_name='Public IPv4 Address')),
                ('wan6', models.GenericIPAddressField(blank=True, help_text='AUTOFILLED: Public (WAN) IPv6 address for this server', null=True, verbose_name='Public IPv6 Address')),
                ('private_key', models.CharField(blank=True, default=None, max_length=128, null=True, verbose_name='Private Key')),
                ('public_key', models.CharField(blank=True, default=None, max_length=128, null=True, verbose_name='Public Key')),
                ('config', models.TextField(blank=True, default='', max_length=25565, verbose_name='Server config (generated)')),
                ('address', models.CharField(default='10.13.0.1', help_text='Address of the tunnel server.  (Default: 10.13.0.1)', max_length=128, unique=True, verbose_name='Server IPv4 address')),
                ('subnet', models.IntegerField(default=16, help_text='Subnet bits of the v4 tunnel.  (Default: 16)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='IPv4 Tunnel Subnet Mask')),
                ('address6', models.CharField(blank=True, help_text='IPv6 address of the tunnel server.', max_length=128, null=True, unique=True, verbose_name='Server IPv6 address')),
                ('subnet6', models.IntegerField(default=64, help_text='Subnet bits of the v6 tunnel.  (Default: 64)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(127)], verbose_name='IPv6 Tunnel Subnet Mask')),
                ('port', models.IntegerField(default=51820, help_text='Port for the server to listen on.', validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(65535)], verbose_name='Listen Port')),
            ],
            options={
                'verbose_name': 'WireGuard Server',
                'verbose_name_plural': 'WireGuard Servers',
            },
        ),
        migrations.CreateModel(
            name='WireguardPeer',
            fields=[
                ('id', api.models.uuid.UUIDField(default=api.models.uuid.gen_uuid, editable=False, max_length=8, primary_key=True, serialize=False, unique=True)),
                ('enabled', models.BooleanField(default=True, help_text='Is this peer enabled in the server config? (Will not be able to connect when disabled)', verbose_name='Enabled')),
                ('private_key', models.CharField(blank=True, default=None, max_length=128, null=True, verbose_name='Private Key')),
                ('public_key', models.CharField(blank=True, default=None, max_length=128, null=True, verbose_name='Public Key')),
                ('config', models.TextField(blank=True, default='', help_text='This is regenerated every time on save.', max_length=512, verbose_name='WireGuard Config')),
                ('qr', models.ImageField(blank=True, null=True, upload_to='', verbose_name='QR Code')),
                ('address', models.GenericIPAddressField(blank=True, help_text='Local IPv4 address within VPN subnet this client will have (eg. 10.13.0.x)', null=True, protocol='IPv4', verbose_name='IPv4 tunnel address')),
                ('address6', models.GenericIPAddressField(blank=True, help_text='Local IPv6 address within VPN subnet this client will have', null=True, protocol='IPv6', verbose_name='IPv6 tunnel address')),
                ('dns', models.CharField(blank=True, help_text='DNS servers this client will use.', max_length=256, null=True, verbose_name='DNS (comma separated)')),
                ('allowed_ips', models.CharField(default='0.0.0.0/0', help_text='IP addresses that will use the tunnel interface (defaults to all)', max_length=128, verbose_name='Allowed IPs')),
                ('keepalive', models.IntegerField(blank=True, help_text='Keep Alive interval to maintain the tunnel connection.  Optional.', null=True, verbose_name='Persistent Keepalive')),
                ('server', models.ForeignKey(default=letsvpn.WireguardServer.models.WireguardServer.get_default, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='server', to='letsvpn.wireguardserver')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'WireGuard Peer',
                'verbose_name_plural': 'WireGuard Peers',
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', api.models.uuid.UUIDField(default=api.models.uuid.gen_uuid, editable=False, max_length=8, primary_key=True, serialize=False, unique=True)),
                ('theme', models.CharField(choices=[('dark', 'Dark'), ('light', 'Light')], default='dark', max_length=8, verbose_name='Color Theme')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='usersettings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Settings',
                'verbose_name_plural': 'User Settings',
            },
        ),
        migrations.RunPython(create_settings, delete_settings),
        migrations.RunPython(create_default_server, delete_default_server),
    ]
